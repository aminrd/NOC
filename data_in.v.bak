module data_in(output_data,enable,em_pl, out_num,PW, vc_g, vc_f, push_o,clk, reset, push_x, PW_fail, vc_grant, ST_ack,bf_in,prev_x, prev_y, vt_channel,push_ack);
  
  //Port Assignments:
  parameter LL = 16;	
  output [LL-1:0] output_data;
  output reg enable;
  output [2:0] em_pl;
  output reg [2:0] out_num;
  output reg PW, vc_g, vc_f, push_o,push_ack;
  input clk, reset, push_x, PW_fail, vc_grant, ST_ack;
  input [LL-1:0] bf_in;
  input [2:0] prev_x;
  input [2:0] prev_y;
  input [2:0] vt_channel;
  
  wire [4:0] verification, status;
  reg [2:0] x_final, y_final;

  reg Pri;
  reg pop;
  reg push;
  
  reg [2:0] state;
  reg [2:0] n_state;  
  
  Buffer sample_buffer (output_data, em_pl, clk, reset, pop, push, bf_in);
  XY_logic routing_xy(verification, status, prev_x, prev_y, x_final, y_final, vt_channel, reset);
  
  always @(posedge clk)
  begin
    if(reset)
      state <= 'b0;
    else
      state <= n_state;
  end
  
  always @(*)
  begin
    case (state)
      3'b000:
      begin
        if(vc_grant == 0)
          n_state = 'b0;
        else
          n_state = 3'b1;
      end
      3'b001:
      begin
        if(ST_ack)
          n_state = 3'b010;
        else
          n_state = 3'b001;
      end
      3'b010: n_state = 3'b011;
      3'b011: n_state = 3'b100;
      3'b100: n_state = 3'b101;
      3'b101: n_state = 3'b110;
      3'b110: n_state = 3'b000;
    endcase
  end
  
  always @(*)
  begin
    case (state)
      3'b000: 
      begin
        {vc_f,push_o,pop} = 3'b100;
        if(vc_grant == 1)
          vc_f = 0;
      end
      3'b001: {vc_f,push_o,pop} = 3'b000;
      3'b010: {vc_f,push_o,pop} = 3'b011;
      3'b011: {vc_f,push_o,pop} = 3'b011;
      3'b100: {vc_f,push_o,pop} = 3'b011;
      3'b101: {vc_f,push_o,pop} = 3'b011;
      3'b110: {vc_f,push_o,pop} = 3'b100;
    endcase
  end     
  
  
  always @(*)
  begin
	if (reset)
	begin
		push = 0;
		push_ack = 0;
	end
	else
	begin
		push = 0;
		push_ack = 0;
		if(bf_in[63:62] == 2'b11 && em_pl == 3'd4)
		begin
			push = push_x;
			push_ack = push_x;
		end
		else if(bf_in[63:62] == 2'b01 || bf_in[63:62] == 2'b10)
		begin
			push = push_x;
			push_ack = push_x;
		end
	end
  end
  
  always @(*)
  begin
	if (reset)
		enable=0;
	else
	begin
		enable = 0;
		if(output_data[63:62] == 2'b11 && em_pl < 3'd4)  
		begin
			x_final = output_data[8:6];
			y_final = output_data[11:9];
			enable = 1;
			Pri = Pri + 1;
		end
	end
  end
  
  always @(posedge clk)
  begin
    if(reset)
    begin
      vc_g = 0;
    end
    else
    begin
      if(output_data[63:62] == 2'b11)
      begin
        vc_g = vc_grant;
      end
    end
  end 

  always @(*)
  begin
	if(reset)
	begin
		PW = 0;
		out_num=5;
    end
	else
	case (verification)
      5'b10000:
        out_num = 4;
      5'b01000:
        out_num = 3;
      5'b00100:
        out_num = 2;
      5'b00010:
        out_num = 1;
      5'b00001:
        out_num = 0;
      5'b00101:
      begin
        if(status[0] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 0;
            PW = 1;
          end
          else
          begin
            out_num = 2;
            PW = 0;
          end
        end
        else if(status[2] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 2;
            PW = 1;
          end
          else
            {out_num,PW} = 'b0;
        end
        else
        begin
          PW = 0;
          if(Pri == 0)
            out_num = 0;         
          else
            out_num = 2;
        end
      end
      
      5'b00110:
      begin
        if(status[1] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 1;
            PW = 1;
          end
          else
          begin
            out_num = 2;
            PW = 0;
          end
        end
        else if(status[2] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 2;
            PW = 1;
          end
          else
          begin
            out_num = 1;
            PW = 0;
          end
        end
        else
        begin
          PW = 0;
          if(Pri == 0)
            out_num = 1;         
          else
            out_num = 2;
        end
      end
      
      5'b01001:
      begin
        if(status[0] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 0;
            PW = 1;
          end
          else
          begin
            out_num = 3;
            PW = 0;
          end
        end
        else if(status[3] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 3;
            PW = 1;
          end
          else
          else
            {out_num,PW} = 'b0;
        end
        else
        begin
          PW = 0;
          if(Pri == 0)
            out_num = 0;         
          else
            out_num = 3;
        end
      end
      
      5'b01010:
      begin
        if(status[1] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 1;
            PW = 1;
          end
          else
          begin
            out_num = 3;
            PW = 0;
          end
        end
        else if(status[3] == 1)
        begin
          if(PW_fail == 0)
          begin
            out_num = 3;
            PW = 1;
          end
          else
          begin
            out_num = 1;
            PW = 0;
          end
        end
        else
        begin
          PW = 0;
          if(Pri == 0)
            out_num = 1;         
          else
            out_num = 3;
        end
      end
      
      default:
      begin
        PW = 0;
        out_num = 5;
      end
            
    endcase
  end

endmodule

